{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red0\green0\blue109;\red14\green110\blue109;
\red128\green63\blue122;\red82\green0\blue135;\red0\green0\blue254;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c5490\c43137\c42745;
\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c32157\c0\c52941;\csgenericrgb\c0\c0\c99608;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 energy_list \cf0 = []\
out_file = \cf3 open\cf0 (
\f1\b \cf4 '/Users/Wifes/Dropbox/Quantum Embedding/Codes/Lithium_Downfolding/Qiskit Chem/Hamiltonian_Downfolding_IBM/EnergiesAsOptimized_HF_Driver_102819.dat'
\f0\b0 \cf0 , 
\f1\b \cf4 "w"
\f0\b0 \cf0 )\

\f1\b \cf3 for 
\f0\b0 \cf0 idx 
\f1\b \cf3 in 
\f0\b0 range\cf0 (\cf3 len\cf0 (parameter_sets)):\
    mean, std = \cf5 self\cf0 ._operator.evaluate_with_result(\
        \cf6 result\cf0 =result, \cf6 statevector_mode\cf0 =\cf5 self\cf0 ._quantum_instance.is_statevector,\
        \cf6 use_simulator_operator_mode\cf0 =\cf5 self\cf0 ._use_simulator_operator_mode, \cf6 circuit_name_prefix\cf0 =\cf3 str\cf0 (idx))\
    mean_energy.append(np.real(mean))\
    std_energy.append(np.real(std))\
    \cf5 self\cf0 ._eval_count += \cf7 1\
    
\f1\b \cf3 if 
\f0\b0 \cf5 self\cf0 ._callback 
\f1\b \cf3 is not None
\f0\b0 \cf0 :\
        \cf5 self\cf0 ._callback(\cf5 self\cf0 ._eval_count, parameter_sets[idx], np.real(mean), np.real(std))\
    logger.info(
\f1\b \cf4 'Energy evaluation \{\} returned \{\}'
\f0\b0 \cf0 .format(\cf5 self\cf0 ._eval_count, np.real(mean)))\
    energy_list = [\cf5 self\cf0 ._eval_count, np.real(mean)]\
    \cf3 print\cf0 (
\f1\b \cf4 'Energy evaluation \{\} returned \{\}'
\f0\b0 \cf0 .format(\cf5 self\cf0 ._eval_count, np.real(mean)))\
    list_to_str = 
\f1\b \cf4 " "
\f0\b0 \cf0 .join(\cf3 str\cf0 (e) 
\f1\b \cf3 for 
\f0\b0 \cf0 e 
\f1\b \cf3 in 
\f0\b0 \cf0 energy_list)\
    out_file.write(list_to_str + 
\f1\b \cf4 "\cf3 \\n\cf4 "
\f0\b0 \cf0 )\
\
out_file.close()\
}